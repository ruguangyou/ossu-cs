// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Mux16 before A-Register
    Mux16 (sel=instruction[15], a=instruction, b=outTemp, out=beforeA);
    
    // A-Register
    Mux (sel=instruction[15], a=true, b=instruction[5], out=cA);
    ARegister (in=beforeA, load=cA, out=afterA, out[0..14]=addressM);
    
    // Mux16 before ALU
    Mux16 (sel=instruction[12], a=afterA, b=inM, out=aorm);
    Mux16 (sel=instruction[15], a=afterA, b=aorm, out=y);
    
    // D-Register
    Mux (sel=instruction[15], a=false, b=instruction[4], out=cD);
    DRegister (in=outTemp, load=cD, out=x);
    
    // control bits of ALU
    Mux (sel=instruction[15], a=true, b=instruction[11], out=c1);
    Mux (sel=instruction[15], a=true, b=instruction[10], out=c2);
    Mux (sel=instruction[15], a=false, b=instruction[9], out=c3);
    Mux (sel=instruction[15], a=false, b=instruction[8], out=c4);
    Mux (sel=instruction[15], a=false, b=instruction[7], out=c5);
    Mux (sel=instruction[15], a=false, b=instruction[6], out=c6);
    // ALU
    ALU (x=x, y=y, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, out=outTemp, zr=zr, ng=ng);
    
    // M-Register
    Mux (sel=instruction[15], a=false, b=instruction[3], out=writeM, out=cM);
    Mux16 (sel=cM, a=false, b=outTemp, out=outM);
    
    // po=1 if (outTemp>0)
    Or (a=zr, b=ng, out=npo);
    Not (in=npo, out=po);
    
    // control bit of PC (load)
    And (a=instruction[0], b=po, out=p);
    And (a=instruction[1], b=zr, out=z);
    And (a=instruction[2], b=ng, out=n);
    Or  (a=p, b=z, out=pz);
    Or  (a=n, b=pz, out=pzn);
    Mux (sel=instruction[15], a=false, b=pzn, out=load);
    
    // PC
    PC (in=afterA, inc=true, load=load, reset=reset, out[0..14]=pc);
}