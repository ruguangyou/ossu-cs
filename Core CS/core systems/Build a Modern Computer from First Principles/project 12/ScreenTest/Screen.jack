// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
	static Array screenBase, screenEnd;
	static Array bits;
	static boolean color;

    /** Initializes the Screen. */
    function void init() {
		var int i, temp;
		let i = 0;
		let temp = 1;
		let screenBase = 16384;
		let screenEnd = 24575;
		let bits = Array.new(16);
		while(i < 16){
			let bits[i] = temp;
			let i = i + 1;
			let temp = temp + temp;
		}
		let color = true;	// set to black by default
		return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
		var Array i;
		let i = screenBase;
		while(i < (screenEnd+1)){
			do Memory.poke(i, 0);
			let i = i + 1;
		}
		return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
		var int i, temp;
		let i = 0;
		let temp = 1;
		let color = b;
		if(b){
			while(i < 16){
				let bits[i] = temp;
				let i = i + 1;
				let temp = temp + temp;
			}
		}
		else{
			while(i < 16){
				let bits[i] = ((-1) - temp);	// the binary code of -1 is 1111 1111 1111 1111
				let i = i + 1;
				let temp = temp + temp;
			}
		}
		return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
		var Array addr;
		var int value;
		var int index;
		let addr = screenBase + (32*y) + (x/16);
		let value = Memory.peek(addr);
		let index = x - ((x/16)*16);
		if(color){	// black
			let value = (bits[index]) | value;
		}
		else{	// white
			let value = (bits[index]) & value;
		}
		do Memory.poke(addr, value);
		return;
	}

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
		var int a, b, dx, dy, diff, directX, directY;
		let a = 0;
		let b = 0;
		let directX = 1;
		let directY = 1;
		let dx = x2 - x1;
		let dy = y2 - y1;
		if(dx < 0){
			let directX = -1;
			let dx = -dx;
		}
		if(dy < 0 ){
			let directY = -1;
			let dy = -dy;
		}
		let diff = dx - dy;
		while( (~ (Math.abs(a)>dx)) & (~ (Math.abs(b)>dy)) ){
			do Screen.drawPixel((x1+a), (y1+b));
			if(diff > 0){	// go right
				let a = a + directX;
				let diff = diff - dy;
			}
			else{
				let b = b + directY;
				let diff = diff + dx;
			}
		}
		return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
		var int y, ymax;
		let y = Math.min(y1, y2);
		let ymax = Math.max(y1, y2);
		while(~(y > ymax)){
			do Screen.drawLine(x1, y, x2, y);
			let y = y + 1;
		}
		return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
		var in dx, cy;
		let cy = y - r;
		while(~(cy > (y+r))){
			let dx = Math.sqrt((r*r) - ((y-cy)*(y-cy)));
			do Screen.drawLine((x-dx), cy, (x+dx), cy);
			let cy = cy + 1;
		}
		return;
	}
}
