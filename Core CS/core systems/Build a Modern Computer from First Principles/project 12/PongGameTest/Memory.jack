// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
	static Array ram;
	static Array heap;
	static Array freeList;
	
    /** Initializes the class. */
    function void init() {
		let ram = 0;
		let heap = 2048;		// heapBase
		let freeList = 2048;
		let heap[0] = 0;		// linked list, pointer to the next node, here is null
		let heap[1] = 14335;	// length
		return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
		return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
		let ram[address] = value;
		return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
		var Array block;
		var Array next;
		let next = freeList;
		while(next[1] < (size+2)){
			let next = next[0];
		}
		let block = next + next[1] - size;
		let block[0] = 0;
		let block[1] = size;
		let next[1] = next[1] - size - 2;
		return (block + 2);
	}

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
		let o[0] = freeList;
		let freeList = o;
		return;
	}    
}
