// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
	static Array bits;
	
    /** Initializes the library. */
    function void init() {
		var int i, temp;
		let bits = Array.new(16);
		let i = 0;
		let temp = 1;
		while(i < 16){
			let bits[i] = temp;
			let temp = temp + temp;
			let i = i + 1;
		}
		return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
		if(x < 0){
			return -x;
		}
		return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
		var int sum;
		var int i;
		var int shiftedX;
		let sum = 0;
		let i = 0;
		let shiftedX = x;
		while(i < 16){
			if(Math.bit(y, i)){
				let sum = sum + shiftedX;
			}
			let shiftedX = shiftedX + shiftedX;
			let i = i + 1;
		}
		return sum;
    }
	
	/** help function */
	function boolean bit(int y, int i){
		return y & bits[i];
	}

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
		var int q;
		var int sign;
		let sign = 1;
		if(x < 0){
			let sign = -sign;
			let x = -x;
		}
		if(y < 0){
			let sign = -sign;
			let y = -y;
		}
		if((x < y) | ((y+y) < 0)){
			return 0;
		}
		let q = Math.divide(x, y+y);
		if((x-(2*q*y)) < y){
			return sign*(q+q);
		}
		else{
			return sign*(q+q+1);
		}
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
		var int n;
		var int up, low;
		let up = x;
		let low = 0;
		let n = (up+low)/2;
		while((n>181) | ((n*n) > x) | (~(((n+1)*(n+1)) > x))){	// sqrt(2^15-1)=181, if n>181, n*n will become negative (overflow)
			if((n = 181)){
				return n;
			}
			if((n>181) | ((n*n) > x)){
				let up = n;		
			}
			else{
				let low = n;
			}
			let n = (up+low)/2;
		}
		return n;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
		if(a > b){
			return a;
		}
		return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
		if(a < b){
			return a;
		}
		return b;
	}
}
